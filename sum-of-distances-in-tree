class Solution {
     public int dfs(ArrayList<ArrayList<Integer>> adj,int source,int des,int count,boolean[] vis,boolean stat){
        //doing dfs until find destination, when destination found return the count
        vis[source] = true;
        for(int i : adj.get(source)){
            if(vis[i]==false){
            vis[i] = true;
            count++;
            if(i==des){
                 stat = true;
                }
            
            dfs(adj,i,des,count,vis,stat);
            if(stat==false)
                count--;
            }
        }
        return count;
    }
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
//creating adjacent list
        ArrayList<ArrayList<Integer>> adj  =  new ArrayList<ArrayList<Integer>>();
        for(int i = 0 ; i <n;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i = 0;i<edges.length;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int[] answer = new int[n];
        for(int source = 0 ;source<n;source++){
            int sum =0 ;
            for(int des = 0;des<n;des++){
                boolean[] vis = new boolean[n];
                int count = 0;
                boolean stat = false;
             sum = sum + dfs(adj,source,des,count,vis,stat);
            }
            answer[source]=sum;
        }
        return answer;
    }
}
